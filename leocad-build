#!/bin/bash

# dependencies #

source /data/data/com.termux/files/usr/bin/console
source /data/data/com.termux/files/usr/bin/globals

# usage #

# variables #

script=$(basename -- "${BASH_SOURCE[0]}")

print_architecture="$(dpkg --print-architecture)"

source="https://github.com/leozide/leocad.git"

build_binary="leocad"
old_binary="$(which $binary)"
binary_directory="/usr/bin"

home="/home/${SUDO_USER:-$USER}"
configuration_directory="$home/.config"
local_applications_directory="$home/.local/share/applications"
system_applications_directory="/usr/share/applications"

ldraw_directory="/media/MEGA/Lego"
ldraw_parts_directory="/media/MEGA/Lego/ldraw/"

# initial prompt clear #

clear

# packages #

install_list=(
	git
	g++
	make
	zlib1g-dev
	libqt5concurrent5
	libqt5opengl5
	libqt5opengl5-dev
	libqt5printsupport5
	libqt5xml5
	qt5-default
	qttools5-dev
	qttools5-dev-tools
)

# install #

console.info "Installing required packages."
echo

for package in ${install_list[@]}
do
	if [ -z $(command -v ${package}) ]
	then
		console.warning "Required package '${package}' not present."
		echo

		# use 'apt-get install --no-install-recommends' to keep bloat to a minimum

		echo yes | apt-get install --no-install-recommends ${package}  >> "${PREFIX}"/var/log/"${script}".log 2>&1 &

			console.spinner "Installing [ ${package} ]..."
			echo
	else
		console.success "Required package '${package}' already installed."
		echo
		console.fwd "Continuing..."
		echo

		:
	fi
done

# cleanup

apt-get clean

# build #

clear

console.fwd "Preparing build..."

# make temporary build directory

build_directory=$(mktemp -d)
trap 'rm -rf "$build_directory"' EXIT

cd "$build_directory" || exit 1

git clone "$source" "$build_directory"

# compile project

qmake leocad.pro

# compile binary

make -s >> "${PREFIX}"/var/log/"${script}".log 2>&1 &

console.spinner "Building..."
echo

# update #

console.fwd "Updating binary..."
echo

# verify previous install/build existence

if [[ "$old_binary" != "" ]]
then
	cp "$old_binary" "$old_binary".bak
fi

# copy new binary

cd "$build_directory"/build/release || exit 1

cp "$build_directory"/build/release/"$build_binary"  "$binary_directory"/"$build_binary"

# remove build directory

rm -rf "$build_directory"

# launcher #

# create architecture dependant launcher:
# add LD_PRELOAD to optimize performance on arm64 systems

console.info "Writing launcher."
echo

cat <<- FILE > "$system_applications_directory"/leocad.desktop
[Desktop Entry]
Encoding=UTF-8
Name=LeoCAD
GenericName=LDraw Model Editor
Comment=LDraw Model Editor
FILE

if [[ "$print_architecture" = "arm64" ]]
then
	cat <<- FILE >> "$system_applications_directory"/leocad.desktop
	Exec=env LD_PRELOAD=/lib/libandroid-shmem-aarch64.so /usr/bin/leocad
	FILE
else
	cat <<- FILE >> "$system_applications_directory"/leocad.desktop
	Exec=/usr/bin/leocad
	FILE
fi

cat <<- FILE >> "$system_applications_directory"/leocad.desktop
Icon=leocad
Terminal=false
Type=Application
MimeType=application/x-ldraw;application/x-multipart-ldraw;
Categories=Graphics;2DGraphics;3DGraphics;Editor;
FILE

chmod +x "$system_applications_directory"/leocad.desktop

# configuration #

# verify configuration directory existence

if [ ! -d "$configuration_directory/LeoCAD Software" ]
then
	mkdir -p "$configuration_directory/LeoCAD Software"
fi

cd "$configuration_directory/LeoCAD Software" || exit 1

# link configuration

console.info "Linking configuration."
echo

ln -s -f /media/Internal/MEGA/Lego/leocad/leocad.conf "$configuration_directory/LeoCAD Software/LeoCAD.conf"

# complete #

console.success "Done."
echo
