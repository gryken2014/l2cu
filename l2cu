#!/bin/bash

# Author: Nathanel Titane - nathanel.titane@gmail.com

# L²CU # l2cu # linux ldraw command line utility #

# dependencies #

curl -sL get.trmnl.me/console/console > /usr/bin/console && . /usr/bin/console

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="12-15-2021"

# usage #

while (($#))
do
	case "${1}" in
		-directory)
			shift
			directory="${1}"
		;;
# file types #
		-all)
			extension_option="all"
			extensions_list=(ldr mpd)
		;;

		-ldr)
			extension_option="ldr"
			extensions_list=(ldr)
		;;

		-mpd)
			extension_option="mpd"
			extensions_list=(mpd)
		;;
# rendering #
		-render)
			option="render"
		;;

		-full)
			render_option="full"
			render_preset="full"
		;;

		-fixed)
			render_option="fixed"
			render_preset="fixed"
		;;

		-flat)
			render_option="flat"
			render_preset="flat"
		;;

		-quarter-back)
			render_option="quarter-back"
			render_preset="quarter-back"
		;;

		-quarter-front)
			render_option="quarter-front"
			render_preset="quarter-front"
		;;

		-back)
			render_option="back"
			render_preset="back"
		;;

		-front)
			render_option="front"
			render_preset="front"
		;;
# exports #
		-export)
			option="export"
		;;

		-3ds)
			export_option="3ds"
			export_extension="3ds"
			export_name="3DS"
		;;

		-blender)
			export_option="3ds"
			export_extension="blend"
			export_name="Blender"
		;;

		-collada)
			export_option="dae"
			export_extension="dae"
			export_name="Collada"
		;;

		-wavefront)
			export_option="obj"
			export_extension="obj"
			export_name="Wavefront"
		;;
# modify #
		-modify)
			option="modify"
		;;

		-color)
			modify_option="color"
		;;

		-part)
			modify_option="part"
		;;

		-bind)
			modify_option="bind"
		;;

		-lint)
			modify_option="lint"
		;;

		-step)
			modify_option="step"
		;;

		-format)
			modify_option="format"
		;;

		-overwrite)
			overwrite_option="overwrite"
		;;
# get #
		-get)
			option="get"
		;;

		-update)
			get_option=update
		;;

		-unofficial)
			get_option=unofficial
		;;
# make list #
		-make-list)
			option="make-list"
		;;

		-descritpion)
			sort_mode="description"
		;;

		-number)
			sort_mode="number"
		;;
# help #
		-h|--help)
			echo
                       	echo -e "Usage: ./${script} [EXTENSION OPTION] [OPTION] [PARAMETER]"
			echo
			echo -e "Utility options:"
			echo
			echo -e "-directory \t\t Specify directory to load models from."
			echo
			echo -e "-all \t\t Selects ldr and mpd file formats as target."
			echo -e "-ldr \t\t Selects ldr file format as target."
			echo -e "-mpd \t\t Selects mpd file format as target."
			echo
			echo -e "RENDER:"
			echo
			echo -e "-render \t Renders model files using the following parameters:"
			echo
			echo -e "-full \t\t Render series of images using options 0 to 3."
			echo -e "-fixed \t\t Render series of images using options 0 and 1."
			echo -e "-flat \t\t Render series of images without shading."
			echo -e "-quarter-back \t [ 0 ] Render image using a quarter-back view preset. \t [Lat.:30, Lon.: -135]"
			echo -e "-quarter-front \t [ 1 ] Render image using a quarter-front view preset. \t [Lat.:30, Lon.: 45]"
			echo -e "-back \t\t [ 2 ] Render image using a back view preset. \t\t [Lat.:30, Lon.: 180]"
			echo -e "-front \t\t [ 3 ] Render image using a front view preset. \t\t [Lat.:30, Lon.: 0]"
			echo
			echo -e "EXPORT:"
			echo
			echo -e "-export \t Exports model files using the following parameters:"
			echo
			echo -e "-3ds \t\t Export 3ds file format only."
			echo -e "-blender \t Export blender file format only."
			echo -e "-collada \t Export collada file format only."
			echo -e "-wavefront \t Export wavefront (obj and mtl as zip archive) file format only."
			echo
			echo -e "MODIFY:"
			echo
			echo -e "-modify \t Modifies model files using the following parameters:"
			echo
			echo -e "-lint \t\t Standardize and format model files for parsing."
			echo -e "-color \t\t Modify a part's color attribute only."
			echo -e "-part \t\t Modify a part for another by number attribute only."
			echo -e "-bind \t\t Match a part to a specific color and modify the color for that selection."
			echo -e "-step \t\t Separate ldr based submodels using step meta tags."
			echo -e "-format \t Strip and clean model files from older LDraw editor formats and set output to UTF-8 standard."
			echo -e "-overwrite \t Read from and overwrite the original model file after modification."
			echo
			echo -e "GET:"
			echo -e "-get \t\t Download the LDraw parts library. [-complete | -update | -unofficlal]"
			echo
			echo -e "-complete \t Download the LDraw parts library - complete official archive."
			echo -e "-update \t Download the LDraw parts library - update official archive."
			echo -e "-unofficial \t Download the LDraw parts library - complete unofficial archive."
			echo
			echo -e "MAKE LIST:"
			echo
			echo -e "-description \t Sort list by part description."
			echo -e "-number \t Sort list by part number."
			echo
                        echo -e "'${script}' [ Version ${version} ]"
                        echo

                        exit
                ;;

                *)
                        echo
                       	echo -e "Usage: ./${script} [EXTENSION OPTION] [OPTION] [PARAMETER]"
                        echo
                        echo -e "${script}: Unknown option '${1}'"
                        echo -e "Type './${script} --help' for help and usage information."
                        echo

                        exit 1
                ;;
        esac

        shift
done

# variables #

# functions #

# get library

get_library () {

	parts_archive=$(basename "${parts_url}")

	# download

	console.download "${parts_url}" "${directory}"/"${parts_archive}"

	# extract

	unzip "${parts_archive}" &

	console.spinner "Extracting..."
	echo

	# rename

	mv "${parts_archive}" ldraw.zip
}

# export: make temporary file #

if [[ "${option}" == "export" ]]
then
	console.trap beautify

	# push blender conversion script to temporary file

	console.get https://raw.githubusercontent.com/nathaneltitane/l2cu/master beautify "${beautify}"
fi

# modify: make temporary file #

if [[ ${option} == "modify" ]]
then
	console.trap colors

	# push ldraw colors list to temporary file

	console.get https://raw.githubusercontent.com/nathaneltitane/l2cu/master colors "${colors}"

fi

# initial prompt clear #

clear

# test for utility dependencies and requirements

console.inf "Verifying utility requirements..."
echo

install_list=(
	leocad
	blender
	zip
	unzip
)

console.install ${install_list[@]}

# clear #

clear

# welcome #

console.title "L²CU" "l2cu // linux ldraw command line utility" "${version}"

console.msg "Initializing..."

console.wait 2

# confirmation #

console.msg "Utility started using the '${extension_option}' extension option."
console.msg "Utility started using the '${option}' option."
echo

console.wait 2

if [[ "${option}" = "render" ]]
then
	console.inf "Utility started using the ${render_option} camera preset."
	echo

elif [[ "${option}" = "export" ]]
then
	console.inf "Utility started using the ${export_name} export parameter."
	echo
fi

if [[ "${option}" = "overwrite" ]]
then
	console.wrn "WARNING:"
	console.wrn "Utility started using the overwrite option:"
	console.wrn "Model modifications will be written to file directly!"
	echo
fi

# if 'directory' option is not passed

if [ -z "${directory}" ]
then
	console.ask "Load model files from:"
	echo

	# specify directory location or exit on 'cancel'

	directory=$(console.dialog "Load model files")

	if [ -z "${directory}" ]
	then
		console.err "No model directory specified."
		echo
		console.fwd "Exiting..."
		echo

		exit 1
	fi
fi

console.fwd "Proceeding..."
echo

# clear #

clear

# parse #

for extension in ${extensions_list[@]}
do
	for model in $(echo $(find ${directory} -iname "*.${extension}"))
	do
		# get model file name from path

		model_file="${model##*/}"

		# strip extension from model file name

		model_file_name="${model_file%.*}"

		model_name="${model_file_name}"

# render #

		if [[ "${option}" = "render" ]]
		then
			# define render routine

			leocad_render () {

				height="4096"
				width="4096"
				extension="png"

				model="${1}"
				coordinates="${2}"

				leocad \
					-h "${height}"															\
					-w "${width}"															\
					-i "${model_name}-${view[$coordinates]}.${extension}"					\
					--camera-angles ${latitude[$coordinates]} ${longitude[$coordinates]}	\
					--shading ${shading}													\
					--line-width ${line_width} "${model}" >> /dev/null
			}

			# define render output directory

			# use model directory as root

			renders_directory="${model%/*}"/renders

			# use render directory as root

			background_directory="${model%/*}"/renders/background

			# use render directory as root

			flat_directory="${model%/*}"/renders/flat

			# define render parameters for all presets

			# default camera latitude

			latitude=(
				30
				30
				30
				30
			)

			# default camera longitude

			longitude=(
				225
				45
				180
				0
			)

			# default view labels

			view=(
				"quarter-back"
				"quarter-front"
				"back"
				"front"
			)

			# define camera position presets

			if [[ "${render_preset}" == "full" ]]
			then
				position=(0 1 2 3)
				shading=full
				line_width=1
			fi

			if [[ "${render_preset}" == "fixed" ]]
			then
				position=(0 1)
				shading=full
				line_width=1
			fi

			if [[ "${render_preset}" == "quarter-back" ]]
			then
				position=(0)
				shading=full
				line_width=1
			fi

			if [[ "${render_preset}" == "quarter-front" ]]
			then
				position=(1)
				shading=full
				line_width=1
			fi

			if [[ "${render_preset}" == "back" ]]
			then
				position=(2)
				shading=full
				line_width=1
			fi

			if [[ "${render_preset}" == "front" ]]
			then
				position=(3)
			fi

			if [[ "${render_preset}" == "flat" ]]
			then
				position=(1)
				shading=flat
				line_width=0

				renders_directory="$flat_directory"
			fi

			# render model using options

			console.msg "Rendering in:"
			console.msg "${renders_directory%*/}"
			echo

			for coordinates in ${position[@]}
			do
				# check for the renders directory existence

				if [ ! -d "${renders_directory}" ]
				then
					mkdir -p "${renders_directory}"
				fi

				cd "${renders_directory}" || exit 1

				# render

				console.inf "Rendering" "${model_name^^}"
				console.inf "View" "${view[coordinates]^^}"
				echo

				leocad_render "${model}" $coordinates

				wait

				# create flat splash image

				if [[ "${render_option}" == "flat" ]]
				then
					# Rename renders to designated splash images

					mv "${model_name}-${view[1]}.${extension}" "${flat_directory}/flat.${extension}"
				fi
			done

			console.inf "Output" "${model_name}-${view[$coordinates]}.${extension}"
			echo
		fi

# export #

		if [[ "${option}" == "export" ]]
		then
			export_file="${model_name}.${export_extension}"

			# explicit export file types for optimization

			export_file_3ds="${model_name}.3ds"
			export_file_blend="${model_name}.blend"
			export_file_collada="${model_name}.dae"
			export_file_object="${model_name}.obj"
			export_file_material="${model_name}.mtl"
			export_file_archive="${model_name}.zip"

			# define model exports top directory

			# use model directory as root

			exports_directory="${model%/*}/exports/"

			# define export routine

			leocad_export () {

				console.msg "Exporting in:"
				console.msg "${exports_directory%*/}"
				echo

				console.inf "Exporting" "${model_name^^}"
				console.inf "Format" "${export_name}"
				echo

				console.inf "Output" "${export_file}"
				echo
				
				leocad "${model}" "-${export_option}" "${export_file}" >> /dev/null

				wait
			}

			# check for the exports directory existence

			if [[ ! -d "${exports_directory}" ]]
			then
				mkdir -p "${exports_directory}"
			fi

			cd "${exports_directory}" || exit 1

			# export

			if [[ "${export_option}" = "3ds" ]] || \
			   [[ "${export_option}" = "dae" ]] || \
			   [[ "${export_option}" = "obj" ]]
			then
				leocad_export

				wait

				if [[ "${export_option}" = "obj" ]]
				then
					# archive wavefront model elements

					zip "${export_file_archive}" "${export_file_object}" "${export_file_material}"

					# cleanup

					rm -rf {*.obj,*.mtl}
				fi

			elif [[ "${export_option}" = "blender" ]]
			then
				leocad_export

				console.inf "Converting $model ("$export_extension")..."
				echo

				# import 3ds file into blender to create optimized blend file

				blender --background --python "${beautify}" "${export_file_3ds}" >> /dev/null

				# cleanup

				rm -rf "${export_file_3ds}"
			fi

			# verify export file size

			block_size-1024

			# get model size in bytes

			model_size=$(find -type f "${exports_directory}${export_file}" | du -B "${block_size}" | cut -f 1)

			# set model size threshold in bytes : 25 * 1024

			model_size_threshold="25600"

			# if lesser than threshold

			if [[ "${model_size}" -le "${model_size_threshold}" ]]
			then
				console.scs "File size threshold not exceeded" "[ ${model_size} ]"
				echo

			# if greater than threshold

			elif [[ "${model_size}" -gt "${model_size_threshold}" ]]
			then
				console.err "File size threshold exceeded" "[ ${model_size} ]"
				echo
				console.wrn "WARNING:"
				console.wrn "Model file size is above recommended threshold of ${model_size_threshold}B"
				console.wrn "You may experience higher than average loading times."
				echo
			fi
		fi
	done
done

# modify #

if [[ "${option}" == "modify" ]]
then
	parse_colors () {
		console.empty

		# set to lowercase for input match

		color_input="${input,,}"

		while IFS=$' '
		read -r ldraw_color_name ldraw_color_number ldraw_color_hex_value
		do
			# color input entries cleanup

			# color name

			# remove underscores from name

			space_name="${ldraw_color_name//_/ }"

			# set name to lowercase for input match

			name="${space_name,,}"

			# reattribute input variable to lowercase name value

			ldraw_color_name="${name}"

			# color hex value

			# remove pound from name

			hex_value="${ldraw_color_hex_value//#/}"

			# set name to lowercase for input match

			hex_value="${hex_value,,}"

			# attribute input variable to lowercase name value

			ldraw_color_hex_value="${hex_value}"

			if [[ "${color_input}" == "${ldraw_color_name}" ]]		|| \
			   [[ "${color_input}" == "${ldraw_color_number}" ]]	|| \
			   [[ "${color_input}" == "${ldraw_color_hex_value}" ]]
			then
				# confirmation

				console.fwd "Confirming input value..."
				echo
				console.inf "Color name" "${ldraw_color_name}"
				console.inf "Color number" "${ldraw_color_number}"
				console.inf "Color hexadecimal value" "${ldraw_color_hex_value}"
				echo

				return "${ldraw_color_number}"
			fi

		done < "${colors}"

		console.err "No available color matches the input."
		echo
		console.fwd "Exiting..."
		echo

		exit 1
	}

	parse_parts () {
		console.empty

		part_input="$input"

		return "${part_input}"
	}

	# get input

	if [[ "${modify_option}" = "color" ]]
	then
		console.ipt "Enter the color description [ name / number / hexadecimal ] to modify."

		parse_colors

		# $? returning wrong arbitrary value

		old_color="${ldraw_color_number}"

		console.ipt "Enter the color description [ name / number / hexadecimal ] to set."

		parse_colors

		# $? returning wrong arbitrary value

		new_color="${ldraw_color_number}"
	fi

	if [[ "${modify_option}" = "part" ]]
	then
		console.ipt "Enter the part number to modify."

		parse_parts

		# $? returning wrong arbitrary value

		old_part="${part_input}"

		console.ipt "Enter the part number to set as replacement."

		parse_parts

		# $? returning wrong arbitrary value

		new_part="${part_input}"
	fi

	if [[ "${modify_option}" = "bind" ]]
	then
		console.ipt "Enter the part number to modify."

		parse_parts

		# $? returning wrong arbitrary value

		part_selection="${part_input}"

		console.ipt "Enter the matching color description [ name | number | hexadecimal ] modify for the selected part."

		parse_colors

		# $? returning wrong arbitrary value

		old_color="${ldraw_color_number}"

		console.ipt "Enter the new color description [ name | number | hexadecimal ] to set for the selected part."

		parse_colors

		# $? returning wrong arbitrary value for ${new_color}

		new_color="${ldraw_color_number}"
	fi

	# substitution

	IFS=' '

	for extension in ${extensions_list[@]}
	do
		echo $(find ${directory} -iname "*.${extension}") | while read -r model
		do
			model_export="${model##*/}"
			model_export_name="${model_export%.*}"
			model_export_name_clean="${model_export_name:5}"

			temporary_file="$model.tmp"

# modify: read model #

			# initialize line count

			line_number=0

			# parse

			while IFS=
			read -r line
			do
				line_number=$(( ${line_number} + 1 ))

# modify: lint #

				# model file linting

				if [[ "${modify_option}" = "lint" ]]
				then
					console.inf "Linting model file."
					echo
					console.inf "Model file" "${model}"
					echo

						# substitute carriage return for newline
						# substitute lines containing empty parsing string # BUG #
						# substitute multiple whitespace characters to one

						# delete lines beginning with whitespace character
						# delete lines beginning with dot character
						# delete lines containing BACKGROUND meta
						# delete lines containing PIVOT meta
						# delete lines containing HIDDEN meta

						# strip '(' character
						# strip ')' character

					sed													\
						-e 's/\r//g'									\
						-e 's/0 STEP  *\./0 STEP/g'						\
						-e 's/  */ /g'									\
						-e '/  *\./d'									\
						-e '/^ /d'										\
						-e '/^\./d'										\
						-e '/BACKGROUND/d'								\
						-e '/PIVOT/d'									\
						-e '/HIDDEN/d'									\
						-e 's/(//g'										\
						-e 's/)//g'										\
						-e '/^$/d' "${model}" > "${temporary_file}"

						# exit to avoid line breakdown iteration and overwrite

						break
				fi

				# line breakdown for other functions

				if [[ "${line}" == *!LEOCAD* ]] || [[ "${line}" == *FILE* ]] || [[ "${line}" == *NOFILE* ]]
				then
					# skip header and footer lines containing matching patterns
					# prevents model file syntax modification

					echo "${line}" >> "${temporary_file}"
				else
					# read lines and parse
					# model_data is either a part file reference or a submodel

					IFS=' '
					read -r flag color x y z a b c d e f g h i model_data <<< "${line}"

					vect_x="$a $b $c"
					vect_y="$d $e $f"
					vect_z="$g $h $i"

					# set IFS

					IFS='.'

					# split part argument into part number and part extension

					read part suffix <<< "${model_data}"

					IFS=' '

# modify: color #

					# color substitution

					if [[ "${modify_option}" = "color" ]]
					then
						if [[ "${color}" = "${old_color}" ]]
						then
							color="${new_color}"

							console.inf "Modifying" "${model}"
							echo
							console.inf "Changing" "${old_color}"
							console.inf "Setting" "${new_color} "
							echo
						else
							: # pass
						fi
					fi

# modify: part #

					# part substitution

					if [[ "${modify_option}" = "part" ]]
					then
						if [[ "${part}" = "${old_part}" ]]
						then
							part="${new_part}"

							console.inf "Modifying" "${model}"
							echo
							console.inf "Changing" "${old_part}"
							console.inf "Setting" "${new_part} "
							echo
						else
							: # pass
						fi
					fi

# modify: bind #

					# bind [ part + color ] color substitution

					if [[ "${modify_option}" = "bind" ]]
					then
						if [[ "${part}" == "${part_selection}" ]]
						then
							if [[ "${color}" = "${old_color}" ]]
							then
								color="${new_color}"

								console.inf "Modifying" "${model}"
								echo
								console.inf "Part" "${part}"
								echo
								console.inf "Changing" "${old_color}"
								console.inf "Setting" "${new_color} "
								echo
							else
								: # pass
							fi
						fi
					fi

# modify: step #

					# step submodel [ldr] separation

					if [[ "${modify_option}" = "step" ]]
					then
							if [[ "${line}" == *ldr* ]]
							then
									if [[ "${suffix}" == *ldr* ]]
									then
											color="0"
											suffix="ldr\n0 STEP"
									else
											: # pass
									fi
							fi
					fi

# modify: format #

					# file structure and meta substitution

					if [[ "${modify_option}" = "format" ]]
					then
						# strip lines that match the following expressions
						# comment out to keep

						if [[ "${line}" = *"New Model"* ]]
						then
							: # pass

						elif [[ "${line}" = *Name* ]]
						then
							: # pass

						elif [[ "${line}" = *Unofficial* ]]
						then
							: # pass

						elif [[ "${line}" = *Untitled* ]]
						then
							: # pass

						elif [[ "${line}" == *[aA][uU][tT][hH][oO][rR]* ]]
						then
							IFS=' '
							read -r flag statement author_model author author_string <<< "${line}"

							if [ ! -e "./author" ]
							then
								console.wrn "No author file found."
								echo
								console.ask "Create author file?"
								echo

								read reply

								if [[ "${reply}" = [yY] || "${reply}" = [yY][eE][sS] ]]
								then
									console.ipt "Enter author information:"
									echo

									console.empty

									author_input="$input"

									echo "${author_input}" > ./author

									author_string=$(echo $(cat ./author))
								else
									console.wrn "No author string/file specified."
									echo
									console.fwd "Skipping..."
									echo

									line=""
								fi

							else
								if [ -e "./author" ]
								then
									author_string=$(echo $(cat ./author))
								fi
							fi

							echo "${line}" >> "${temporary_file}"

						elif [[ "${line}" = *BACKGROUND* ]]
						then
							IFS=' '
							read -r flag statement background_model background_background background_color bg_color_1 bg_color_2 bg_color_3 <<< "${line}"

							: # pass

						elif [[ "${line}" = *"GROUP BEGIN"* ]]
						then
							IFS=' '
							read -r flag statement group group_begin group_name <<< "${line}"

							: # pass

						elif [[ "${line}" = *"GROUP END"* ]]
						then
							IFS=' '
							read -r flag statement group group_end <<< "${line}"

							: # pass

						elif [[ "${line}" = *PIVOT* ]]
						then
							IFS=' '
							read -r flag statement piece pivot pivot_coordinates <<< "${line}"

							: # pass

						elif [[ "${line}" = *HIDDEN* ]]
						then
							IFS=' '
							read -r flag statement piece hidden <<< "${line}"

							: # pass
						else
							# if line contains '!LEOCAD' tag

							if [[ "${line}" == *!LEOCAD* ]]
							then
								# skip header and footer lines containing matching patterns
								# prevents model file syntax modification

								echo "${line}" >> "${temporary_file}"
							fi

							# if line contains 'NOFILE' tag

							if [[ "${line}" == *NOFILE* ]]
							then
								# skip header and footer lines containing matching patterns
								# prevents model file syntax modification

								echo "${line}" >> "${temporary_file}"
							fi

							# if line contains 'FILE' tag

							if [[ "${line}" == *FILE* ]]
							then
								IFS=' '
								read -r flag statement file_name <<< "${line}"

								# spaces to dashes

								clean_file_name="${clean_file_name// /-}"

								# string to lower case

								clean_file_name="${clean_file_name,,}"

								# write changes to tempporary file

								echo "${flag} ${statement} $clean_file_name" >> "${temporary_file}"
							else
								# parse all other lines and format submodel string

								IFS=' '
								read -r flag color x y z a b c d e f g h i model_data <<< "${line}"

								# spaces to dashes

								clean_model_data="${clean_model_data// /-}"

								# string to lower case

								clean_model_data="${clean_model_data,,}"

								vect_x="${a} ${b} ${c}"
								vect_y="${d} ${e} ${f}"
								vect_z="${g} ${h} ${i}"

								# # # # # #		# # # # # #
								# a d g 0 #		# a b c x #
								# b e h 0 #		# d e f y #
								# c f i 0 #		# g h i z #
								# x y z 1 #		# 0 0 0 1 #
								# # # # # #		# # # # # 

							fi
						fi
					fi

					# reset IFS

					IFS=" "

					# write changes to tempporary file

					echo -e "${flag}" "${color}" "${x}" "${y}" "${z}" "${a}" "${b}" "${c}" "${d}" "${e}" "${f}" "${g}" "${h}" "${i}" "${part}.${suffix}" >> "${temporary_file}"
				fi

			done < "${model}" # feed model file into loop for parsing

# modify: overwrite #

			# write changes to file

			if [[ "$overwrite_option" = "overwrite" ]]
			then
				console.wrn "[ OVERWRITE ] option enabled!"
				console.inf "Writing changes to original model file!"
				echo

				console.wrn "Writing file."
				echo
				console.inf "Model file" "${model}"
				echo

				mv "${temporary_file}" "${temporary_file%.tmp}"
			fi

			if [ -z "$overwrite_option" ]
			then
				console.ask "Write changes to original model file?"

				echo
				console.inf "Model file" "${model}"
				echo

				read reply

				if [[ "${reply}" = [yY] || "${reply}" = [yY][eE][sS] ]]
				then
					console.wrn "[ OVERWRITE ] option enabled!"
					console.inf "Writing changes to original model file."
					echo

					console.wrn "Writing file."
					echo
					console.inf "Model file" "${model}"
					echo

					mv "${temporary_file}" "${temporary_file%.tmp}"

				else
					console.wrn "[ OVERWRITE ] option disabled."
					console.inf "Writing changes to model file copy."
					echo
					console.fwd "Writing changes to model file copy."
					echo

					mv "${temporary_file}" "${temporary_file%.tmp}_modified_$stamp.${extension}"
				fi
			fi
		done
	done
fi

# get #

if [[  "${option}" = "get" ]]
then
	parts_url="https://www.ldraw.org/library/updates/complete.zip"

	complete_parts_url="https://www.ldraw.org/library/updates/complete.zip"
	update_parts_url="https://ldraw.org/library/unofficial/lcad1903.zip"
	unofficial_parts_url="https://ldraw.org/library/unofficial/ldrawunf.zip"

	if [[ "${get_option}" = "complete" ]]
	then
		parts_url="${complete_parts_url}"
	fi

	if [[ "${get_option}" = "update" ]]
	then
		# workaround until html parsing is complete # TODO #

		parts_url="${complete_parts_url}"
	fi

	if [[ "${get_option}" = "unofficial" ]]
	then
		parts_url="${unofficial_parts_url}"
	fi

	if [ -z "${directory}" ]
	then
		console.ask "Specify download location?"

		echo

		read reply

		if [[ "${reply}" = [yY] || "${reply}" = [yY][eE][sS] ]]
		then
			# specify directory location or exit on 'cancel'

			browse=$(console.dialog "Save to") || exit 1

			directory="${browse}"
		else
			directory="${PWD}"

			console.wrn "No directory location specified."
			console.wrn "Downloading into current directory."
			echo
		fi

		get_library
	fi
fi

# make list #

if [[ "${option}" = "make-list" ]]
then
	if [ -z "${directory}" ]
	then
		console.wrn "Is the LDraw parts library setup on this system?"

		echo

		read reply

		if [[ "${reply}" = [yY] || "${reply}" = [yY][eE][sS] ]]
		then
			# specify directory location or exit on 'cancel'

			browse=$(console.dialog "Load LDraw library") || exit 1

			cd "${browse}" || exit 1

			if [[ "$(basename $(pwd))" == [lL][dD][rR][aA][wW] ]] && [[ -d "parts" ]]
			then
				console.scs "LDraw parts library exists."
				console.scs "Operating within the LDraw parts directory."
				echo
				console.fwd "Continuing..."
				echo

				directory="${browse}"/parts
			else
				console.err "LDraw library directory not recognized: 'parts' directory not found."
			fi
		else
			console.wrn "LDraw parts directory not found."
			console.ask "Specify the LDraw parts library directory location to continue?"

			echo

			read reply

			if [[ "${reply}" = [yY] || "${reply}" = [yY][eE][sS] ]]
			then
				# specify directory location or exit on 'cancel'

				browse=$(dialog) || exit 1

				directory="${browse}"/parts
			else
				console.ask "Download the latest LDraw parts library?"

				echo

				read reply

				if [[ "${reply}" = [yY] || "${reply}" = [yY][eE][sS] ]]
				then
					console.fwd "Specify setup location."
					echo

					# specify directory location or exit on 'cancel'

					setup_directory=$(console.dialog) || exit 1

					cd "${setup_directory}" || exit 1

					get_library

					directory="$setup_directory/[lL][dD][rR][aA][wW]/parts"
				else
					console.err "LDraw parts directory not setup on system."
					echo
					console.wrn "The parts.lst file may be needed for some legacy editors to function."
					echo
					console.inf "Visit http://www.ldraw.org to get started."
					console.inf "You can download and extract the LDraw parts library on your system manually."
					console.inf "Restart and run this utility using the 'make-list' option to generate the parts list."
					echo
					console.fwd "Exiting..."
					echo

					exit 1
				fi
			fi
		fi
	fi

	cd "${directory}" || exit 1

	# parts list verification and backup

	if [[ -e [pP][aA][rR][tT][sS].[lL][sS][tT] ]]
	then
		console.wrn "Alternate version of 'parts.lst' file found."
		echo
		console.fwd "Backing up..."
		echo

		mv parts.lst parts.lst.bak
	fi

	# sorting mode verification

	if [[ "$sort_mode" == "description" ]] || [[ "$sort_mode" == "number" ]]
	then
		console.inf "Utility startedusing the $sort_mode option flag."
	else
		console.wrn "No sorting method specified."
		echo
		console.ask "Which sorting method should be used for parsing the parts list?"
		console.ask "[ [dD]escription / [nN]umber ]"
		echo

		read reply
	fi

	if [ -z "${reply}" ]
	then
		exit 1
	else
		# parse parts list

		console.fwd "Processing..."
		echo

		# initialize counter

		count=1

		for extension in ${extensions_list[@]}
		do
			for part in $(echo $(find ${directory} -iname *.${extension}))
			do
				filename="${part##*/}"
				header="$(head -n 1 "${part}")"
				description="${header:2}"

				if [[ "${description}" == *~Moved* ]]
				then
					: # pass
				else
					if [[ "${description}" == *_* ]]
					then
						printf '%-30s %-s\n' "${filename}" "${description}" >> "._.lst"

					elif [[ "${description}" == *~* ]]
					then
						printf '%-30s %-s\n' "${filename}" "${description}" >> ".~.lst"

					else
						printf '%-30s %-s\n' "${filename}" "${description}" >> parts.lst
					fi

					console.inf "Parts count" "$((count++))\c"
					echo
				fi
			done
		done

		# keep counter visible while looping

		echo

		separator=' '

		# apply sorting method

		for list in "._.lst" ".~.lst" parts.lst
		do
			if [[ "${reply}" = [dD] ]] || [[ "${sort_mode}" == "description" ]]
			then
				sort -b -d -k 2 -t "${separator}" -o "${list}" "${list}"

			elif [[ "${reply}" = [nN] ]] || [[ "${sort_mode}" == "number" ]]
			then
				sort -b -n -k 1 -t "${separator}" -o "${list}" "${list}"
			fi
		done

		# merge

		cat "._.lst" ".~.lst" >> parts.lst

		# cleanup

		rm -rf "._.lst" ".~.lst"
	fi
fi

# complete #

console.scs "Done."
